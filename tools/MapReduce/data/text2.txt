memory for connections and checks input/output sizes of components.

More accurate description is available at `april_help`, but don't be affraid, the next
section presents an abstraction for train MLPs which automatically does a lot of
this work:

The simpliest kind of ANN is a Multilayer Perceptron (MLP) where each layer is
fully connected with the next layer (feed-forward, all-all connections).

The method `generate` returns an special component object, which cannot be
modified. Actually, it is a Lua table formed by an `ann.components.stack`
instance and other information useful to load and save the MLPs, and it
implements wrapper Lua functions to ANN component methods.

As said before, each component has a unique name, and if needed a weights
name. The next code iterates over all components:

The MLP is composed by 9 components, two activation functions (actf1 and actf2),
two bias components (b1 and b2), one stack component which works as a container
(c1), two hyperplane components containing one bias and one dot_product each one
