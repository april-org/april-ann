The second is related to the `trainable.supervised_trainer` object, and will
be detailed in following sections.

This two functions can store and load from a file the component generated via
`ann.mlp.all_all.generate` function. It only works with this kind of object.
The save function has the precondition of a build component. The load function
loads the weights and returns a built component.

Save and load via `trainable` writes to disk the model, weights, loss function,
and bunch size (note that this list could be larger in the future). The object
must be at build state before save, and load returns a built `trainable` object:

The loss function is used to train the ANNs via gradient descent
algorithm. Trainer objects needs an instance of a loss function to perform
training, being a very useful abstraction of standard training procedures.

Detailed information about loss functions is in:

The loss function could be set at trainer constructor, or using the method
set_loss_function:
